#ifndef RX_MACHINE_H_INCLUDED
#define RX_MACHINE_H_INCLUDED

#include "exam.h"
#include "patient.h"

// Define a estrutura para a máquina RX
typedef struct rx_machine Rx;

/**
 * @brief Create and initialize a list of X-Machines // Cria e inicializa uma lista de máquinas X
 *
 * @return Pointer to the array of X-Machines // Ponteiro para o array de Máquinas X
 */
Rx **create_machines();

/**
 * @brief Frees the memory allocated for the list of X-Machines.
 * @details Deallocates memory for each X-Machine and the array of pointers.
 * @param machines_list - Pointer to the array of pointers to X-Machines.
 */

void destroy_machines(Rx **machines_list);
/**
 * @brief Verifies the availability of X-Machines and occupies one for the given patient.
 * @param machines_list - Pointer to the array of pointers to X-Machines.
 * @param patient - Pointer to the patient for whom the exam is to be performed.
 * @return Pointer to the created Exam or NULL if no machine is available.
 */
Exam *verify_and_ocupate(Rx **machines_list, Patient *patient);

/**
 * @brief Performs an exam using the AI diagnostic and marks the machine as available.
 * @details Creates a new exam with a diagnostic generated by the AI, simulates the exam process,
 *          and then marks the machine as available again.
 * @param machine - Pointer to the X-Machine performing the exam.
 * @return Pointer to the created Exam or NULL if the machine is not valid.
 */
Exam *do_exam_with_AI(Rx *machine);

/**
 * @brief Generates a random diagnostic based on AI.
 * @details Creates a diagnostic based on predefined probabilities, simulating an AI-generated result.
 * @return Pointer to a string representing the diagnostic.
 */
char *diagnostic_by_ai();

#endif // RX_MACHINE_H_INCLUDED
